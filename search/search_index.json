{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"Demo application for <code>textual-countdown</code> <p>This library provides a simple visual countdown widget Textual applications, designed to subtly let the user know that a period of time is passing; essentially a simple \"wait some time\" progress bar.</p> <p>Example uses for the widget could be as a non-intrusive countdown in some sort of quiz application, or a cool-down display in an application that's waiting to hit a busy API endpoint again.</p>"},{"location":"#installing","title":"Installing","text":"<p><code>textual-countdown</code> is available from pypi and can be installed with <code>pip</code> or similar Python package tools:</p> <pre><code>$ pip install textual-countdown\n</code></pre>"},{"location":"#demo","title":"Demo","text":"<p>Once installed, you can try a demo of the library with:</p> <pre><code>$ python -m textual_countdown\n</code></pre>"},{"location":"#requirements","title":"Requirements","text":"<p>The only requirement for this library, other than the standard Python library, is <code>textual</code>.</p>"},{"location":"changelog/","title":"ChangeLog","text":""},{"location":"changelog/#v010","title":"v0.1.0","text":"<p>Released: 2024-01-11</p> <p>Initial release.</p>"},{"location":"license/","title":"License","text":"<pre><code>MIT License\n\nCopyright (c) 2024 Dave Pearson &lt;davep@davep.org&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to\ndeal in the Software without restriction, including without limitation the\nrights to use, copy, modify, merge, publish, distribute, sublicense, and/or\nsell copies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\nIN THE SOFTWARE.\n</code></pre>"},{"location":"using/","title":"Using the library","text":""},{"location":"using/#including-the-widget","title":"Including the widget","text":"<p><code>textual-countdown</code> provides just one widget: <code>Countdown</code>; this can be composed into your application like any other widget:</p> Import and composeThe Countdown widget <pre><code>from textual.app import App, ComposeResult\n\nfrom textual_countdown import Countdown\n\n\nclass CountdownApp(App[None]):\n    def compose(self) -&gt; ComposeResult:\n        yield Countdown()\n\n\nif __name__ == \"__main__\":\n    CountdownApp().run()\n</code></pre> <p> CountdownApp \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 </p>"},{"location":"using/#starting-a-countdown","title":"Starting a countdown","text":"<p>As you can see above, the <code>Countdown</code> widget doesn't do anything interesting to start with; it's just a dim line. To have the widget start to count down and show the user that something is happening you need to call the <code>start</code> method:</p> Start a countdownThe started Countdown widget <pre><code>from textual.app import App, ComposeResult\n\nfrom textual_countdown import Countdown\n\n\nclass CountdownApp(App[None]):\n    def compose(self) -&gt; ComposeResult:\n        yield Countdown()\n\n    def on_mount(self) -&gt; None:\n        self.query_one(Countdown).start(10)\n\n\nif __name__ == \"__main__\":\n    CountdownApp().run()\n</code></pre> <p> CountdownApp \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 </p> <p>Once the countdown starts, as you can see above in the tab that shows the result, the countdown bar will change colour to show how much time is left to go. Over time the highlighted portion of the bar will reduce:</p> After 1 secondAfter 2 secondAfter 3 second <p> CountdownApp \u2501\u2501\u2501\u2578\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u257a\u2501\u2501\u2501 </p> <p> CountdownApp \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2578\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u257a\u2501\u2501\u2501\u2501\u2501\u2501\u2501 </p> <p> CountdownApp \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2578\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u257a\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 </p>"},{"location":"using/#knowing-when-the-countdown-starts-and-ends","title":"Knowing when the countdown starts and ends","text":"<p>To help react to a countdown starting and ending the <code>Countdown</code> widget posts two different messages: <code>Started</code> and <code>Finished</code>.</p> Reacting to countdown messagesAfter the countdown has startedAfter the countdown has finished <pre><code>from textual import on\nfrom textual.app import App, ComposeResult\n\nfrom textual_countdown import Countdown\n\n\nclass CountdownApp(App[None]):\n    def compose(self) -&gt; ComposeResult:\n        yield Countdown()\n\n    def on_mount(self) -&gt; None:\n        self.query_one(Countdown).start(2)\n\n    @on(Countdown.Started)\n    def _react_to_start(self) -&gt; None:\n        self.notify(\"The countdown has begun!\")\n\n    @on(Countdown.Finished)\n    def _react_to_finish(self) -&gt; None:\n        self.notify(\"The countdown has ended!\")\n\n\nif __name__ == \"__main__\":\n    CountdownApp().run()\n</code></pre> <p> CountdownApp \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2578\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u257a\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 \u258c \u258cThe\u00a0countdown\u00a0has\u00a0begun! \u258c </p> <p> CountdownApp \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 \u258c \u258cThe\u00a0countdown\u00a0has\u00a0begun! \u258c \u258c \u258cThe\u00a0countdown\u00a0has\u00a0ended! \u258c </p>"},{"location":"using/#cancelling-a-countdown","title":"Cancelling a countdown","text":"<p>There are going to be times when you want to cancel a running countdown, this can be done with the <code>cancel</code> method. If called the countdown will stop, the display will revert back to the \"not running\" appearance, and a <code>Cancelled</code> message is posted.</p> Cancelling a countdownAfter the countdown has been cancelled <pre><code>from textual import on\nfrom textual.app import App, ComposeResult\n\nfrom textual_countdown import Countdown\n\n\nclass CountdownApp(App[None]):\n    def compose(self) -&gt; ComposeResult:\n        yield Countdown()\n\n    def on_mount(self) -&gt; None:\n        self.query_one(Countdown).start(3)\n        self.set_timer(1, self.query_one(Countdown).cancel)\n\n    @on(Countdown.Cancelled)\n    def _react_to_cancel(self) -&gt; None:\n        self.notify(\"The countdown was cancelled!\")\n\n\nif __name__ == \"__main__\":\n    CountdownApp().run()\n</code></pre> <p> CountdownApp \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 \u258c \u258cThe\u00a0countdown\u00a0was\u00a0cancelled! \u258c </p>"},{"location":"using/#styling-the-countdown-widget","title":"Styling the countdown widget","text":"<p>The background of the widget is styled using the usual Textual <code>background</code> style. Likewise, the \"non-counting\" portion of the bar is controlled with the usual Textual <code>color</code> style.</p> <p>To style the time-remaining portion of the bar of a running countdown, use the <code>countdown--remaining</code> component class:</p> Styling a Countdown widgetThe styled Countdown widget <pre><code>from textual.app import App, ComposeResult\n\nfrom textual_countdown import Countdown\n\n\nclass CountdownApp(App[None]):\n    CSS = \"\"\"\n    Countdown {\n        background: red;\n        color: blue;\n        &amp;&gt; .countdown--remaining {\n            color: yellow;\n        }\n    }\n    \"\"\"\n\n    def compose(self) -&gt; ComposeResult:\n        yield Countdown()\n\n    def on_mount(self) -&gt; None:\n        self.query_one(Countdown).start(3)\n\n\nif __name__ == \"__main__\":\n    CountdownApp().run()\n</code></pre> <p> CountdownApp \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u257a\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2578\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 </p>"},{"location":"library-contents/countdown/","title":"textual_countdown.countdown","text":"<p>Provides a visual countdown widget.</p>"},{"location":"library-contents/countdown/#textual_countdown.countdown.Countdown","title":"Countdown","text":"<pre><code>Countdown(name=None, id=None, classes=None, disabled=False)\n</code></pre> <p>               Bases: <code>Widget</code></p> <p>A countdown widget.</p> <p>Parameters:</p> Name Type Description Default <code>str | None</code> <p>The name of the countdown widget.</p> <code>None</code> <code>str | None</code> <p>The ID of the countdown widget in the DOM.</p> <code>None</code> <code>str | None</code> <p>The CSS classes of the countdown widget.</p> <code>None</code> <code>bool</code> <p>Whether the countdown widget is disabled or not.</p> <code>False</code>"},{"location":"library-contents/countdown/#textual_countdown.countdown.Countdown(name)","title":"<code>name</code>","text":""},{"location":"library-contents/countdown/#textual_countdown.countdown.Countdown(id)","title":"<code>id</code>","text":""},{"location":"library-contents/countdown/#textual_countdown.countdown.Countdown(classes)","title":"<code>classes</code>","text":""},{"location":"library-contents/countdown/#textual_countdown.countdown.Countdown(disabled)","title":"<code>disabled</code>","text":""},{"location":"library-contents/countdown/#textual_countdown.countdown.Countdown.COMPONENT_CLASSES","title":"COMPONENT_CLASSES  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>COMPONENT_CLASSES = {'countdown--remaining'}\n</code></pre> Class Description <code>countdown--remaining</code> Targets the remaining portion of the countdown display."},{"location":"library-contents/countdown/#textual_countdown.countdown.Countdown.is_running","title":"is_running  <code>property</code>","text":"<pre><code>is_running\n</code></pre> <p>Is the countdown currently running?</p>"},{"location":"library-contents/countdown/#textual_countdown.countdown.Countdown.Cancelled","title":"Cancelled  <code>dataclass</code>","text":"<pre><code>Cancelled(countdown)\n</code></pre> <p>               Bases: <code>CountdownMessage</code></p> <p>Message sent if the countdown is cancelled.</p>"},{"location":"library-contents/countdown/#textual_countdown.countdown.Countdown.CountdownMessage","title":"CountdownMessage  <code>dataclass</code>","text":"<pre><code>CountdownMessage(countdown)\n</code></pre> <p>               Bases: <code>Message</code></p> <p>Base class for the <code>Countdown</code> message classes.</p>"},{"location":"library-contents/countdown/#textual_countdown.countdown.Countdown.CountdownMessage.control","title":"control  <code>property</code>","text":"<pre><code>control\n</code></pre> <p>An alias for <code>countdown</code>.</p>"},{"location":"library-contents/countdown/#textual_countdown.countdown.Countdown.CountdownMessage.countdown","title":"countdown  <code>instance-attribute</code>","text":"<pre><code>countdown\n</code></pre> <p>The <code>Countdown</code> widget that sent the message.</p>"},{"location":"library-contents/countdown/#textual_countdown.countdown.Countdown.Finished","title":"Finished  <code>dataclass</code>","text":"<pre><code>Finished(countdown, counting)\n</code></pre> <p>               Bases: <code>Timed</code></p> <p>Message sent when the countdown finishes.</p>"},{"location":"library-contents/countdown/#textual_countdown.countdown.Countdown.Started","title":"Started  <code>dataclass</code>","text":"<pre><code>Started(countdown, counting)\n</code></pre> <p>               Bases: <code>Timed</code></p> <p>Message sent when the countdown starts.</p>"},{"location":"library-contents/countdown/#textual_countdown.countdown.Countdown.Timed","title":"Timed  <code>dataclass</code>","text":"<pre><code>Timed(countdown, counting)\n</code></pre> <p>               Bases: <code>CountdownMessage</code></p> <p>Base class for messages that include a time value.</p>"},{"location":"library-contents/countdown/#textual_countdown.countdown.Countdown.Timed.counting","title":"counting  <code>instance-attribute</code>","text":"<pre><code>counting\n</code></pre> <p>The amount being counted.</p>"},{"location":"library-contents/countdown/#textual_countdown.countdown.Countdown.cancel","title":"cancel","text":"<pre><code>cancel()\n</code></pre> <p>Cancel the countdown timer from running.</p> Note <p>When the countdown is cancelled a <code>Cancelled</code> message is posted.</p>"},{"location":"library-contents/countdown/#textual_countdown.countdown.Countdown.start","title":"start","text":"<pre><code>start(countdown)\n</code></pre> <p>Start a countdown.</p> <p>Parameters:</p> Name Type Description Default <code>float</code> <p>The amount of time to count down.</p> required Note <p>When the countdown starts a <code>Started</code> message is posted.</p>"},{"location":"library-contents/countdown/#textual_countdown.countdown.Countdown.start(countdown)","title":"<code>countdown</code>","text":""}]}